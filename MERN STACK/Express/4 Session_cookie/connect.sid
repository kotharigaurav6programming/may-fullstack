What is connect.sid?
connect.sid is the default session cookie name used by Express.js when utilizing the express-session middleware. It is used to maintain session state across multiple requests from the same client.

connect refers to Connect, a middleware framework that Express is built upon.
sid stands for Session ID—a unique identifier assigned to a user's session.
When a user first visits an Express-based application that uses express-session, the server generates a unique session ID and sends it to the user's browser in a cookie named connect.sid. On subsequent requests, the browser sends this cookie back to the server, allowing the server to retrieve the user's session data.

What is a Session Cookie?
A session cookie is a type of HTTP cookie that stores session-related information but does not persist after the browser is closed (unless explicitly configured otherwise). It is primarily used for maintaining stateful interactions between a client and a server.

Characteristics of Session Cookies:
Temporary – Stored in memory and deleted when the browser is closed (unless set as persistent).
Used for Authentication & User State – Often contains a session ID that helps retrieve user-related data from the server.
Secure & HTTP-only (recommended) – Can be configured to prevent JavaScript access (httpOnly: true) and enforce encryption (secure: true for HTTPS).
How connect.sid Works in express-session
When express-session is used, the workflow is:

A user makes a request to the server.

If no session exists, the server creates one and generates a session ID.

The server sends the session ID back to the browser as a cookie (connect.sid).
On subsequent requests, the browser sends back connect.sid, allowing the server to retrieve the stored session data.

Example Usage in Express.js
const express = require('express');
const session = require('express-session');

const app = express();

app.use(session({
    secret: 'your-secret-key',   // Secret key for signing the session ID
    resave: false,               // Don't save session if unmodified
    saveUninitialized: false,    // Don't create session until something is stored
    cookie: {
        httpOnly: true,          // Prevent JavaScript access
        secure: false,           // Set to true in production with HTTPS
        maxAge: 60000            // Expiry time in milliseconds
    }
}));

app.get('/', (req, res) => {
    if (!req.session.views) {
        req.session.views = 1;
    } else {
        req.session.views++;
    }
    res.send(`You have visited this page ${req.session.views} times`);
});

app.listen(3000, () => console.log('Server running on port 3000'));

Key Configurations for connect.sid:

You can configure how connect.sid behaves with the session cookie options:

httpOnly: true → Prevents client-side JavaScript from accessing the cookie.

secure: true → Ensures the cookie is only sent over HTTPS.

maxAge → Defines how long the session should last.

resave: false → Avoids unnecessary session saving when no changes occur.

saveUninitialized: false → Prevents creating empty sessions.

How to View connect.sid in the Browser

Open Developer Tools in your browser (F12 or Ctrl + Shift + I).

Go to the Application tab.

Under Storage > Cookies, select your website.

Look for connect.sid in the list of cookies.

Conclusion

connect.sid is a session identifier stored as a cookie in express-session.

It helps the server track user sessions without storing data on the client.

It is a session cookie, meaning it lives for the session duration (unless configured otherwise).

Best practices include setting httpOnly: true, secure: true, and defining a proper expiration time.